set nocompatible

"encoding displayed.
set encoding=UTF-8

"encoding written to file.
"set filecoding=UTF-8

set termguicolors

set tabstop=4
set expandtab
set shiftwidth=4
"required for vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" === Lets make vim look cool. ===
Plugin 'morhetz/gruvbox'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" === Making vim more like IDE === 
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'easymotion/vim-easymotion'
Plugin 'vim-syntastic/syntastic'
Plugin 'luochen1990/rainbow'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'preservim/tagbar'


Plugin 'neovim/nvim-lspconfig'
Plugin 'hrsh7th/nvim-compe'
" Plug 'nvim-lua/completion-nvim'
" Extensions to built-in LSP, for example, providing type inlay hints
Plugin 'nvim-lua/lsp_extensions.nvim'

" Autocompletion framework for built-in LSP
"Plugin 'nvim-lua/completion-nvim'


Plugin 'fatih/vim-go'

call vundle#end()            

filetype plugin indent on   

set backspace=indent,eol,start
set ruler
set number
set rnu
set showcmd
set incsearch
set hlsearch
set cursorline
set mouse=a
set splitright "vertical splits the buffer to right.
set splitbelow "split below the current buffer for h split
"code snippet folding config
set foldmethod=indent   
set foldnestmax=10
set nofoldenable
set foldlevel=2
syntax on


" [[tab config]]
function! OpenCurrentAsNewTab()
    let l:currentPos = getcurpos()
    tabedit %
    call setpos(".", l:currentPos)
endfunction
"open current buffer as new tab
nmap t% :call OpenCurrentAsNewTab()<CR>
nmap td :tabclose<CR>
nmap tn :tabNext<CR>

"split mapping Ctrl-a (confliucts with tmux) horizontal split, Ctrl-S vertical split.
"nmap <C-a> :sp<CR> disabling for ---^^
nmap <C-S> :vsp<CR>

"buffer navigation
noremap ,n :bn<CR>
noremap ,p :bp<CR>

"remap arrow keys to move the line up and down 
no <up> :m .-2<CR>==
no <down> :m .+1<CR>==
no <left> <NOP>
no <right> <NOP>

vno <down> <NOP>
vno <up> <NOP>
vno <left> <NOP>

"window command for navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

"=================Plugin configs==============

"Nerdtree mappings

"Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR> 
noremap <silent> <leader>nf :NERDTreeFind<CR>
"To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 1

let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
		\ }
let g:NERDTreeGitStatusShowClean = 1
" ============================================


" Theme config
"Toggle this to "light" for light colorscheme
let g:gruvbox_contrast_dark = 'hard'

"Uncomment the next line if your terminal is not configured for solarized
"let g:solarized_termcolors=256
 let g:gruvbox_invert_selection='0'
 set background=dark
colorscheme gruvbox


set laststatus=2
"Show PASTE if in paste mode
let g:airline_detect_paste=1
"Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
"Use the solarized theme for the Airline status bar
let g:airline_theme='gruvbox'

" FZF fuzzy finder mapping
noremap <leader>zf :Files<CR>

"Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes



"Fugitive configuration
noremap <leader>gc :GCheckout<CR>
noremap <leader>gs :G<CR>

let g:python3_host_prog='/Users/nishanth/.pyenv/shims/python3'

" === airblade/vim-gitgutter settings -----
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" === Go/vim-go 
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
augroup END

":w<CR>:vsplit <bar> terminal go run %<CR>
function! ReuseVimGoTerm(cmd) abort
   if has('nvim') 
    for w in nvim_list_wins()
        if "goterm" == nvim_buf_get_option(nvim_win_get_buf(w), 'filetype')
            call nvim_win_close(w, v:true)
            break
        endif
    endfor
    endif
    execute a:cmd
endfunction

let g:go_term_enabled = 1
let g:go_term_mode = "silent keepalt  vsplit"
let g:go_def_reuse_buffer = 1
let g:go_fmt_command = "goimports"

au FileType go nmap <leader>gr :call ReuseVimGoTerm('GoRun')<CR>
"au FileType go nmap <leader>r  :w<CR>:vsplit <bar> terminal go run %<CR>
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt :call ReuseVimGoTerm('GoTest')<CR>
"au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
"let g:go_def_mapping_enabled = 0
"let g:go_doc_keywordprg_enabled = 0



set completeopt=menuone,noinsert,noselect,preview

" Avoid showing extra messages when using completion
set shortmess+=c
" 300ms of no cursor movement to trigger CursorHold
set updatetime=300

let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:false
let g:compe.source.ultisnips = v:false

" ---- LSP config

lua <<EOF
	local nvim_lsp = require'lspconfig'

    local on_attach = function(client, bufnr)
      local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
      local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
    
      --Enable completion triggered by <c-x><c-o>
--      buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
    
      -- Mappings.
      local opts = { noremap=true, silent=true }
    
      -- See `:help vim.lsp.*` for documentation on any of the below functions
      buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
      buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
      buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
      buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
      buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
      buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
      buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
      buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
      buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
      buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
      buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
      buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
      buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
      buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
      buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
      buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
      buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
    
	end

    -- add capabilities
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    
    capabilities.textDocument.completion.completionItem.snippetSupport = true
    capabilities.textDocument.completion.completionItem.resolveSupport = {
      properties = {
        'documentation',
        'detail',
        'additionalTextEdits',
      }
    }


    local servers = { "pyright", "rust_analyzer", "tsserver" , "gopls"}
    for _, lsp in ipairs(servers) do
      nvim_lsp[lsp].setup {
        on_attach = on_attach;
        capabilities = capabilities;
      }
    end

    vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
                   vim.lsp.handlers.signature_help, {
                     -- Use a sharp border with `FloatBorder` highlights
                     border = "single"
                   }
                 )


    local t = function(str)
      return vim.api.nvim_replace_termcodes(str, true, true, true)
    end
    _G.s_tab_complete = function()
      if vim.fn.pumvisible() == 1 then
        return t "<C-p>"
      elseif vim.fn.call("vsnip#jumpable", {-1}) == 1 then
        return t "<Plug>(vsnip-jump-prev)"
      else
        return t "<S-Tab>"
      end
    end
    
    vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
    vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
    vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
    
    
EOF


" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

" Show diagnostic popup on cursor hold
autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

" Goto previous/next diagnostic warning/error
nnoremap <silent> g[ <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
nnoremap <silent> g] <cmd>lua vim.lsp.diagnostic.goto_next()<CR>


autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *.rs
\ lua require'lsp_extensions'.inlay_hints{ prefix = ' ->', highlight = "Comment", enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }
