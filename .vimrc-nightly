" Author : <Nishanth Shetty> nishanthspshetty@gmail.com
"vimrc/nvim init config
" 
" Should work on mac and linux environment.

"This is optinal if have .vimrc in your path or VIMINIT set (default).
"If you are loading this in vim with -u flag, uncomment this line to set the
"following flag,
set nocompatible

"encoding displayed.
set encoding=UTF-8

"encoding written to file.
"set filecoding=UTF-8

"required for vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" === Lets make vim look cool. ===
Plugin 'morhetz/gruvbox'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" === Making vim more like IDE === 
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'easymotion/vim-easymotion'
Plugin 'vim-syntastic/syntastic'
Plugin 'luochen1990/rainbow'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'preservim/tagbar'

" === Git plugins
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin  'stsewd/fzf-checkout.vim'

" Language plugins

Plugin  'neovim/nvim-lspconfig'
Plugin 'tjdevries/lsp_extensions.nvim'
Plugin 'nvim-lua/completion-nvim' 

call vundle#end()            

"turn back filetype plugin and indentation on
filetype plugin indent on   


" --- basic vim settings ---
set backspace=indent,eol,start
set ruler
set number
set showcmd
set incsearch
set hlsearch
set cursorline
set mouse=a
set splitright "vertical splits the buffer to right.
set splitbelow "split below the current buffer for h split
syntax on

" [[tab config]]
function! OpenCurrentAsNewTab()
    let l:currentPos = getcurpos()
    tabedit %
    call setpos(".", l:currentPos)
endfunction
"open current buffer as new tab
nmap t% :call OpenCurrentAsNewTab()<CR>
nmap td :tabclose<CR>
nmap tn :tabNext<CR>

"split mapping Ctrl-a (confliucts with tmux) horizontal split, Ctrl-S vertical split.
"nmap <C-a> :sp<CR> disabling for ---^^
nmap <C-S> :vsp<CR>

"buffer navigation
noremap ,n :bn<CR>
noremap ,p :bp<CR>

"remap arrow keys to move the line up and down 
no <up> :m .-2<CR>==
no <down> :m .+1<CR>==
no <left> <NOP>
no <right> <NOP>

vno <down> <NOP>
vno <up> <NOP>
vno <left> <NOP>

"window command for navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

"=================Plugin configs==============

"Nerdtree mappings

"Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
noremap <silent> <leader>nf :NERDTreeFind<CR>
"To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 1

let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
		\ }
let g:NERDTreeGitStatusShowClean = 1
" ============================================


" Theme config
"Toggle this to "light" for light colorscheme
"set background=dark

"Uncomment the next line if your terminal is not configured for solarized
"let g:solarized_termcolors=256
let g:gruvbox_contrast_dark = 'hard'
colorscheme  gruvbox
set laststatus=2
"Show PASTE if in paste mode
let g:airline_detect_paste=1
"Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
"Use the solarized theme for the Airline status bar
let g:airline_theme='gruvbox'

" FZF fuzzy finder mapping
noremap <leader>zf :Files<CR>

"Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


"Fugitive configuration
noremap <leader>gc :GCheckout<CR>
noremap <leader>gs :G<CR>
"
"Setup LSP server
lua <<EOF
	local nvim_lsp = require'lspconfig'
	local on_attach = function(client) 
		require'completion'.on_attach(client)
	end

	-- enable rust analyzer
	nvim_lsp.rust_analyzer.setup({ on_attach=on_attach })
	-- enable python lsp server
	nvim_lsp.pyls.setup{ {on_attach = on_attach} }
	-- enable golabg lsp server
	nvim_lsp.gopls.setup{  {on_attach = on_attach }}
	

vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = false,
    signs = true,
    update_in_insert = true,
  }
  )
EOF

set completeopt=menuone,noinsert,noselect

set shortmess+=c

" Code navigation shortcuts
" as found in :help lsp
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
" rust-analyzer does not yet support goto declaration
" re-mapped `gd` to definition
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>
"nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>

" Trigger completion with <tab>
" found in :help completion
" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <Tab> as trigger keys
imap <Tab> <Plug>(completion_smart_tab)
imap <S-Tab> <Plug>(completion_smart_s_tab)

" have a fixed column for the diagnostics to appear in
" this removes the jitter when warnings/errors flow in
set signcolumn=yes

" Set updatetime for CursorHold
" 300ms of no cursor movement to trigger CursorHold
set updatetime=300
" Show diagnostic popup on cursor hover
autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

" Goto previous/next diagnostic warning/error
nnoremap <silent> g[ <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
nnoremap <silent> g] <cmd>lua vim.lsp.diagnostic.goto_next()<CR>

" Enable type inlay hints
autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
\ lua require'lsp_extensions'.inlay_hints{ prefix = '', highlight = "Comment" }
